import{_ as s,o as d,c,I as a,w as i,a as t,j as e,D as o}from"./chunks/framework.CXSnVqW3.js";const C=JSON.parse('{"title":"堆排序","description":"","frontmatter":{"sidebar":{"title":"排序--堆排序","step":4},"isTimeLine":true,"title":"堆排序","date":"2020-08-02T00:00:00.000Z","tags":["手撕代码","算法与数据结构"],"categories":["手撕代码"]},"headers":[],"relativePath":"coding/algorithm/headSort.md","filePath":"coding/algorithm/headSort.md","lastUpdated":1719297432000}'),l={name:"coding/algorithm/headSort.md"},h=e("h1",{id:"堆排序",tabindex:"-1"},[t("堆排序 "),e("a",{class:"header-anchor",href:"#堆排序","aria-label":'Permalink to "堆排序"'},"​")],-1),_=e("p",null,"给你一个整数数组 nums，请你将该数组升序排列。",-1),m=e("h2",{id:"原理",tabindex:"-1"},[t("原理 "),e("a",{class:"header-anchor",href:"#原理","aria-label":'Permalink to "原理"'},"​")],-1),p=e("blockquote",null,[e("p",null,"堆排序的思想就是先将待排序的序列建成大根堆，使得每个父节点的元素大于等于它的子节点。此时整个序列最大值即为堆顶元素，我们将其与末尾元素交换，使末尾元素为最大值，然后再调整堆顶元素使得剩下的 n-1n−1 个元素仍为大根堆，再重复执行以上操作我们即能得到一个有序的序列。")],-1),f=e("h2",{id:"实现",tabindex:"-1"},[t("实现 "),e("a",{class:"header-anchor",href:"#实现","aria-label":'Permalink to "实现"'},"​")],-1),u=e("p",null,"。。。未完待续",-1);function b(g,x,k,P,S,v){const n=o("company"),r=o("LeetCode");return d(),c("div",{"data-pagefind-body":!0},[h,a(n,{value:"几种常见时间复杂度比较低的排序算法之一"}),a(r,{href:"https://leetcode-cn.com/problems/sort-an-array/"},{default:i(()=>[t("912：排序树组")]),_:1}),_,m,p,f,u])}const N=s(l,[["render",b]]);export{C as __pageData,N as default};
